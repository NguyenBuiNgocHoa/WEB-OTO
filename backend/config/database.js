const sql = require('mssql');
require('dotenv').config({ path: './config.env' });

// C·∫•u h√¨nh k·∫øt n·ªëi database
const dbConfig = {
  server: process.env.DB_SERVER || 'localhost',
  database: process.env.DB_DATABASE || 'OTO',
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  port: parseInt(process.env.DB_PORT) || 1433,
  options: {
    encrypt: false, // T·∫Øt m√£ h√≥a cho SQL Server local
    trustServerCertificate: true,
    enableArithAbort: true
  },
  pool: {
    max: 10,
    min: 0,
    idleTimeoutMillis: 30000
  }
};

// T·∫°o pool k·∫øt n·ªëi
const pool = new sql.ConnectionPool(dbConfig);

// H√†m k·∫øt n·ªëi database
const connectDB = async () => {
  try {
    await pool.connect();
    console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!');
    return pool;
  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi database:', error.message);
    process.exit(1);
  }
};

// H√†m ƒë√≥ng k·∫øt n·ªëi database
const closeDB = async () => {
  try {
    await pool.close();
    console.log('üîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi database');
  } catch (error) {
    console.error('‚ùå L·ªói ƒë√≥ng k·∫øt n·ªëi database:', error.message);
  }
};

// H√†m th·ª±c thi query
const executeQuery = async (query, params = []) => {
  try {
    const request = pool.request();
    
    // Th√™m parameters n·∫øu c√≥
    params.forEach((param, index) => {
      request.input(`param${index + 1}`, param);
    });
    
    const result = await request.query(query);
    return result;
  } catch (error) {
    console.error('‚ùå L·ªói th·ª±c thi query:', error.message);
    throw error;
  }
};

module.exports = {
  connectDB,
  closeDB,
  executeQuery,
  pool
}; 